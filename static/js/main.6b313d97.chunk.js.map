{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","marketData","setMarketData","search","setSearch","query","setQuery","page","setPage","rowsPerPage","setRowsPerPage","useEffect","console","log","getData","catch","error","a","fetch","response","json","data","handleReset","handleSort","evt","btnSelected","target","textContent","sort","b","dataA","dataB","comparison","name","toUpperCase","symbol","current_price","total_volume","price_change_percentage_24h","classes","makeStyles","root","display","overflowX","table","minWidth","maxWidth","margin","tableCell","paddingRight","paddingLeft","button","marginTop","useStyles","className","onSubmit","preventDefault","toLowerCase","type","placeholder","onChange","value","Button","variant","size","onClick","Grid","item","xs","container","direction","justify","alignItems","TableContainer","Table","TableHead","TableRow","TableCell","color","disabled","align","disableElevation","TableBody","slice","map","row","key","id","component","scope","src","image","alt","toFixed","market_cap","toLocaleString","TablePagination","rowsPerPageOptions","count","length","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.6b313d97.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  makeStyles,\n  Grid,\n  Table,\n  Button,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport TablePagination from '@material-ui/core/TablePagination';\n\n\nfunction App() {\n  //Set UseStates\n  const [marketData, setMarketData] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  //Set UseEffects\n  useEffect(() => {\n    console.log(\"useEffect has run\");\n\n    getData().catch((error) => {\n      console.log(error);\n    });\n  }, [query]);\n\n  //Functions\n  const getData = async () => {\n    const response = await fetch(\n      `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${query}&order=market_cap_desc&per_page=150&page=1&sparkline=false`\n    );\n    const data = await response.json();\n    console.log(data);\n    console.log(\"this is data is not sorted\");\n    setMarketData(data);\n  };\n\n  const handleReset = () => {\n    setQuery(\"\");\n    setSearch(\"\");\n    getData();\n  };\n\n  const updateSearch = (evt) => {\n    setSearch(evt.target.value);\n  };\n\n  const getSearch = (evt) => {\n    evt.preventDefault();\n    setQuery(search.toLowerCase());\n    setSearch(\"\");\n  };\n\n  // const handleSort = async (evt) => {\n  //   setMarketData([...marketData].sort(compare));\n  //   console.log(\"handleSort has run\");\n  // };\n\n  const handleSort = async (evt) => {\n    let btnSelected = evt.target.textContent;\n    setMarketData(\n      [...marketData].sort((a, b) => {\n        let dataA;\n        let dataB;\n        let comparison = 0;\n        switch (btnSelected) {\n          case \"Name\":\n            dataA = a.name.toUpperCase();\n            dataB = b.name.toUpperCase();\n            comparison = 0;\n            if (dataA > dataB) {\n              comparison = 1;\n            } else if (dataA < dataB) {\n              comparison = -1;\n            }\n            return comparison;\n\n          case \"Symbol\":\n            dataA = a.symbol.toUpperCase();\n            dataB = b.symbol.toUpperCase();\n            comparison = 0;\n            if (dataA > dataB) {\n              comparison = 1;\n            } else if (dataA < dataB) {\n              comparison = -1;\n            }\n            return comparison;\n\n          case \"Price\":\n            dataA = a.current_price;\n            dataB = b.current_price;\n            comparison = 0;\n            if (dataA > dataB) {\n              comparison = 1;\n            } else if (dataA < dataB) {\n              comparison = -1;\n            }\n            return comparison;\n\n          case \"Volume\":\n            dataA = a.total_volume;\n            dataB = b.total_volume;\n            comparison = 0;\n            if (dataA > dataB) {\n              comparison = 1;\n            } else if (dataA < dataB) {\n              comparison = -1;\n            }\n            return comparison;\n\n          case \"Price Change\":\n            dataA = a.price_change_percentage_24h;\n            dataB = b.price_change_percentage_24h;\n            comparison = 0;\n            if (dataA > dataB) {\n              comparison = 1;\n            } else if (dataA < dataB) {\n              comparison = -1;\n            }\n            return comparison;\n\n          case \"Market Cap\":\n            handleReset();\n            break;\n          default:\n        }\n      })\n    );\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const useStyles = makeStyles({\n    root: {\n      display: \"flex\",\n      overflowX: \"hide\",\n    },\n    table: {\n      minWidth: 650,\n      maxWidth: 1100,\n      margin: \"auto\",\n    },\n    tableCell: {\n      paddingRight: 4,\n      paddingLeft: 5,\n    },\n    button: {\n      maxWidth: 200,\n      marginTop: 10,\n      margin: \"auto\",\n    },\n  });\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <div className=\"app_searchContainer\">\n        <h1 className=\"app_searchTitle\"> Search a Cryptocurrency</h1>\n        <form onSubmit={getSearch}>\n          <input\n            type=\"text\"\n            placeholder=\"CryptoCurrency Name\"\n            onChange={updateSearch}\n            value={search}\n            className=\"app_searchInput\"\n          />\n        </form>\n        <Button\n          variant=\"outlined\"\n          size=\"small\"\n          className={classes.button}\n          onClick={handleReset}\n        >\n          Reset Market\n        </Button>\n      </div>\n      <Grid\n        item\n        xs={12}\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <TableContainer className=\"classes.root\">\n          <Table size=\"medium\" className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell className={classes.tableCell}>\n                  <Button color=\"primary\" disabled>\n                    Logo\n                  </Button>\n                </TableCell>\n                <TableCell align=\"center\" className={classes.tableCell}>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={handleSort}\n                  >\n                    Name\n                  </Button>\n                </TableCell>\n                <TableCell align=\"center\" className={classes.tableCell}>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={handleSort}\n                  >\n                    Symbol\n                  </Button>\n                </TableCell>\n                <TableCell align=\"center\" className={classes.tableCell}>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={handleSort}\n                  >\n                    Price\n                  </Button>\n                </TableCell>\n                <TableCell align=\"center\" className={classes.tableCell}>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={handleSort}\n                  >\n                    Volume\n                  </Button>\n                </TableCell>\n                <TableCell align=\"center\" className={classes.tableCell}>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={handleSort}\n                    disableElevation\n                  >\n                    Price Change\n                  </Button>\n                </TableCell>\n                <TableCell align=\"center\" className={classes.tableCell}>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={handleSort}\n                  >\n                    Market Cap\n                  </Button>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {marketData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n                <TableRow key={row.id}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    <img\n                      src={row.image}\n                      className=\"app_symbol\"\n                      alt=\"Market Logo\"\n                    ></img>\n                  </TableCell>\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                    {row.symbol}\n                  </TableCell>\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                    ${row.current_price}\n                  </TableCell>\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                    {row.total_volume}\n                  </TableCell>\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                    {row.price_change_percentage_24h < 0 ? (\n                      <p className=\"market_percent_green\">\n                        {row.price_change_percentage_24h.toFixed(2)}%\n                      </p>\n                    ) : (\n                      <p className=\"market_percent_red\">\n                        {row.price_change_percentage_24h.toFixed(2)}%\n                      </p>\n                    )}\n                  </TableCell>\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                    ${row.market_cap.toLocaleString()}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25,50]}\n          component=\"div\"\n          count={marketData.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}